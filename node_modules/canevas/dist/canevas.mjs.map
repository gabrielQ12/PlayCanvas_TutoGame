{"version":3,"file":"canevas.mjs","sources":["../src/math/Vector2.ts","../src/core/Camera.ts","../src/core/Canvas.ts","../src/core/Material.ts","../src/core/Object2D.ts","../src/core/Shape.ts","../src/math/Color.ts","../src/materials/BasicMaterial.ts","../src/materials/ImageMaterial.ts","../src/materials/SpriteMaterial.ts","../src/math.ts","../src/objects/Mesh.ts","../src/objects/Scene.ts","../src/shapes/BoxShape.ts","../src/shapes/CircleShape.ts","../src/shapes/PolygonShape.ts","../src/shapes/TriangleShape.ts"],"sourcesContent":["export class Vector2 {\n  x: number = 0\n  y: number = 0\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  set(x: number, y: number): Vector2 {\n    this.x = x\n    this.y = y\n    return this\n  }\n\n  copy(v: Vector2): Vector2 {\n    this.x = v.x\n    this.y = v.y\n    return this\n  }\n\n  clone(): Vector2 {\n    return new Vector2(this.x, this.y)\n  }\n\n  add(v: Vector2): Vector2 {\n    this.x += v.x\n    this.y += v.y\n    return this\n  }\n\n  addScalar(scalar: number): Vector2 {\n    this.x += scalar\n    this.y += scalar\n    return this\n  }\n\n  sub(v: Vector2): Vector2 {\n    this.x -= v.x\n    this.y -= v.y\n    return this\n  }\n\n  subScalar(scalar: number): Vector2 {\n    this.x -= scalar\n    this.y -= scalar\n    return this\n  }\n\n  mult(v: Vector2): Vector2 {\n    this.x *= v.x\n    this.y *= v.y\n    return this\n  }\n\n  multScalar(scalar: number): Vector2 {\n    this.x *= scalar\n    this.y *= scalar\n    return this\n  }\n\n  div(v: Vector2): Vector2 {\n    this.x /= v.x\n    this.y /= v.y\n    return this\n  }\n\n  divScalar(scalar: number): Vector2 {\n    if (scalar === 0) {\n      return new Vector2(0, 0)\n    }\n\n    this.x /= scalar\n    this.y /= scalar\n    return this\n  }\n\n  lengthSq(): number {\n    return this.x * this.x + this.y * this.y\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  normalize(): Vector2 {\n    return this.divScalar(this.length())\n  }\n\n  limit(max: number): Vector2 {\n    if (this.length() > max) {\n      this.normalize()\n      this.multScalar(max)\n    }\n\n    return this\n  }\n\n  distanceTo(v: Vector2): number {\n    return Math.sqrt(this.distanceToSq(v))\n  }\n\n  distanceToSq(v: Vector2): number {\n    const dx = this.x - v.x,\n      dy = this.y - v.y\n    return dx * dx + dy * dy\n  }\n}\n","import { Vector2 } from '../math/Vector2'\n\n/**\n * Camera\n *\n * A camera gives a global position/rotation/scale for a scene.\n * So it creates a point of view.\n */\nexport class Camera {\n  type: string = 'camera'\n\n  position: Vector2 = new Vector2()\n  rotation: number = 0\n  zoom: number = 1\n\n  constructor(options?: object) {\n    // TODO: Use options to set properties\n  }\n}\n","import { Camera } from './Camera'\nimport { Scene } from '../objects/Scene'\n\n/**\n * Canvas\n *\n * Create a canvas element in the dom\n * then renders a scene using a camera\n */\nexport class Canvas {\n  element: HTMLCanvasElement = document.createElement('canvas')\n  autoClear: boolean = true\n\n  /**\n   * Resize the canvas and its container\n   *\n   * @param {number} width\n   * @param {number} height\n   */\n  setSize(width: number, height: number) {\n    this.element.width = width\n    this.element.height = height\n    this.element.style.width = width + 'px'\n    this.element.style.height = height + 'px'\n  }\n\n  /**\n   * Clear the canvas\n   */\n  clear() {\n    const context = this.element.getContext('2d')\n    if (context) {\n      context.clearRect(0, 0, this.element.width, this.element.height)\n    }\n  }\n\n  /**\n   * Main rendering function.\n   *\n   * @param {Scene} scene\n   * @param {Camera} camera\n   */\n  render(scene: Scene, camera: Camera) {\n    const context = this.element.getContext('2d')\n\n    if (context === null) {\n      return\n    }\n\n    if (this.autoClear) {\n      this.clear()\n    }\n\n    // Load camera context\n    context.save()\n    context.translate(camera.position.x, camera.position.y)\n    context.rotate(camera.rotation)\n    context.scale(camera.zoom, camera.zoom)\n\n    // Render scene\n    scene.render(context)\n\n    // Restore camera context\n    context.restore()\n  }\n\n  /**\n   * Enable or disable smoothing.\n   *\n   * @param {boolean} smoothing\n   */\n  setSmoothing(smoothing: boolean) {\n    const context = this.element.getContext('2d')\n    if (context) {\n      context.imageSmoothingEnabled = smoothing\n    }\n  }\n}\n","/**\n * A material defines the rendered object appearance and visuals.\n * For example, it can be a color, an image or an animated sprite.\n */\nexport class Material {\n  type: string = 'Material'\n  opacity: number = 1.0\n\n  constructor(options: MaterialOptions = {}) {\n    this.opacity = options.opacity ?? this.opacity\n  }\n\n  render(context: CanvasRenderingContext2D) {\n    context.globalAlpha = this.opacity\n  }\n}\n\nexport interface MaterialOptions {\n  opacity?: number\n}\n","import { Vector2 } from '../math/Vector2'\n\n/**\n * Object2D\n *\n * An object is an class that supports basic features\n * to exists in a 2D environment such as\n * - Parent/Child concept\n * - Position/Rotation/Scale\n * - Visibility\n */\nexport class Object2D {\n  id: number = Object2DIdCount++\n  type: string = 'Object2D'\n\n  parent: Object2D | null = null\n  children: Array<Object2D> = []\n\n  position: Vector2 = new Vector2()\n  rotation: number = 0\n  scale: number = 1\n  visible: boolean = true\n\n  /**\n   * @param options\n   */\n  constructor(options: Object2DOptions = {}) {\n    this.position = options.position ?? this.position\n    this.rotation = options.rotation ?? this.rotation\n    this.scale = options.scale ?? this.scale\n    this.visible = options.visible ?? this.visible\n  }\n\n  /**\n   * Add an object to its children\n   *\n   * @param {Object2D} object\n   * @return {this}\n   */\n  add(object: Object2D) {\n    if (object.parent !== null) {\n      object.parent.remove(object)\n    }\n\n    object.parent = this\n    this.children.push(object)\n\n    return this\n  }\n\n  /**\n   * Remove an object to its children if it exists.\n   *\n   * @param {Object2D} object\n   * @return {this}\n   */\n  remove(object: Object2D) {\n    const index = this.children.indexOf(object)\n\n    if (index !== -1) {\n      object.parent = null\n      this.children.splice(index, 1)\n    }\n\n    return this\n  }\n}\n\n/**\n * Object2D constructor options.\n */\nexport interface Object2DOptions {\n  position?: Vector2\n  rotation?: number\n  scale?: number\n  visible?: boolean\n}\n\n/**\n * Unique ID counter.\n * TODO: Use uuid?\n */\nlet Object2DIdCount: number = 0\n","export abstract class Shape {\n  type = 'Shape'\n\n  /**\n   * Render the shape.\n   */\n  abstract render(context: CanvasRenderingContext2D): void\n}\n","export class Color {\n  r: number = 1\n  g: number = 1\n  b: number = 1\n\n  constructor(color: number) {\n    this.setHex(color)\n  }\n\n  setHex(hex: number): Color {\n    hex = Math.floor(hex)\n    this.r = ((hex >> 16) & 255) / 255\n    this.g = ((hex >> 8) & 255) / 255\n    this.b = (hex & 255) / 255\n    return this\n  }\n\n  setRGB(r: number, g: number, b: number): Color {\n    this.r = r\n    this.g = g\n    this.b = b\n    return this\n  }\n\n  getStyle(): string {\n    const _r = (this.r * 255) | 0,\n      _g = (this.g * 255) | 0,\n      _b = (this.b * 255) | 0\n    return 'rgb(' + _r + ',' + _g + ',' + _b + ')'\n  }\n}\n","import { Material, MaterialOptions } from '../core/Material'\nimport { Color } from '../math/Color'\n\n/**\n * Material that can render lines or faces of a mesh.\n *\n * ```js\n *  const material = new BasicMaterial({ color: 0xFF0000, wireframe: true, opacity: 0.5 });\n *  ```\n */\nexport class BasicMaterial extends Material {\n  type: string = 'BasicMaterial'\n\n  wireframe: boolean = false\n  color: Color = new Color(0x000000)\n\n  constructor(options: BasicMaterialOptions = {}) {\n    super(options)\n    this.wireframe = options.wireframe ?? this.wireframe\n    this.color = options.color ? new Color(options.color) : this.color\n  }\n\n  render(context: CanvasRenderingContext2D) {\n    super.render(context)\n\n    if (this.wireframe) {\n      context.strokeStyle = this.color.getStyle()\n      context.stroke()\n    } else {\n      context.fillStyle = this.color.getStyle()\n      context.fill()\n    }\n  }\n}\n\nexport interface BasicMaterialOptions extends MaterialOptions {\n  wireframe?: boolean\n  color?: number\n}\n","import { Material, MaterialOptions } from '../core/Material'\n\n/**\n * Create a material from an image.\n *\n * ```js\n *  const material = new ImageMaterial({ src: 'image.png', clip: true, opacity: 1.0 });\n *  ```\n */\nexport class ImageMaterial extends Material {\n  type: string = 'ImageMaterial'\n\n  clip: boolean = true\n  image: HTMLImageElement = new Image()\n\n  constructor(options: ImageMaterialOptions = {}) {\n    super(options)\n    this.clip = options.clip ?? this.clip\n    this.image.src = options.src ?? this.image.src\n  }\n\n  render(context: CanvasRenderingContext2D) {\n    super.render(context)\n\n    // Crop the image to fit in the shape\n    if (this.clip) {\n      context.clip()\n    }\n\n    // Render image in the center of the object\n    // TODO: Add offset the properties?\n    context.drawImage(this.image, -this.image.width / 2, -this.image.height / 2)\n  }\n}\n\nexport interface ImageMaterialOptions extends MaterialOptions {\n  clip?: boolean\n  src?: string\n}\n","import { ImageMaterial, ImageMaterialOptions } from './ImageMaterial'\nimport { Material } from '../core/Material'\n\n/**\n * Loop into multiple images to give an animation.\n *\n * ```js\n * const material = new SpriteMaterial({\n *   src: 'sprite.png',\n *   frameStart: 0,\n *   frameCount: 4,\n *   frameRate: 1,\n *   frameSize: [16, 16],\n *   frameOffset: [0, 0],\n *   loop: true\n * })\n * ```\n */\nexport class SpriteMaterial extends ImageMaterial {\n  type: string = 'SpriteMaterial'\n\n  frameStart: number = 1\n  frameCount: number = 1\n  frameRate: number = 1\n  frameSize: number[] = [1, 1]\n  frameOffset: number[] = [0, 0]\n\n  loop: boolean = true\n\n  constructor(options: SpriteMaterialOptions = {}) {\n    super(options)\n    this.frameStart = options.frameStart ?? this.frameStart\n    this.frameCount = options.frameCount ?? this.frameCount\n    this.frameRate = options.frameRate ?? this.frameRate\n    this.frameSize = options.frameSize ?? this.frameSize\n    this.frameOffset = options.frameOffset ?? this.frameOffset\n    this.loop = options.loop ?? this.loop\n  }\n\n  // TODO: Add direction\n  render(context: CanvasRenderingContext2D) {\n    Material.prototype.render.call(this, context)\n\n    // Increase frame index (in the length range)\n    this.frameStart += 1 / this.frameRate\n    this.frameStart %= this.frameCount\n\n    const x = this.frameOffset[0]\n    const y = this.frameOffset[1]\n    const width = this.frameSize[0]\n    const height = this.frameSize[1]\n\n    context.drawImage(\n      this.image,\n      x + (this.frameStart | 0) * width,\n      y,\n      width,\n      height,\n      width * -0.5,\n      height * -0.5,\n      width,\n      height\n    )\n  }\n}\n\nexport interface SpriteMaterialOptions extends ImageMaterialOptions {\n  frameStart?: number\n  frameSize?: [number, number]\n  frameCount?: number\n  frameRate?: number\n  frameOffset?: [number, number]\n  loop?: boolean\n}\n","export const PI2 = Math.PI * 2\nexport const PI05 = Math.PI * 0.5\n","import { Object2D } from '../core/Object2D'\nimport { Shape } from '../core/Shape'\nimport { Material } from '../core/Material'\nimport { PI2 } from '../math'\n\n/**\n * A basic Object2D that handle its shape and its material\n */\nexport class Mesh extends Object2D {\n  type = 'Mesh'\n\n  children: Mesh[] = []\n\n  shape: Shape\n  material: Material\n\n  constructor(shape: Shape, material: Material, options?: object) {\n    super(options)\n    this.shape = shape\n    this.material = material\n  }\n\n  /**\n   * Render the mesh shape and material in its own context.\n   * Restore the default context afterwards.\n   */\n  render(context: CanvasRenderingContext2D) {\n    // Limit rotation value to a whole 360\n    this.rotation %= PI2\n\n    if (this.visible) {\n      context.save()\n\n      // Apply its Object2D properties to the context\n      context.scale(this.scale, this.scale)\n      context.translate(this.position.x, this.position.y)\n      context.rotate(this.rotation)\n\n      // Render shape and material\n      this.shape.render(context)\n      this.material.render(context)\n\n      context.restore()\n    }\n  }\n}\n","import { Object2D } from '../core/Object2D'\nimport { Mesh } from './Mesh'\n\n/**\n * Render a series of meshes.\n */\nexport class Scene extends Object2D {\n  type: string = 'Scene'\n  children: Mesh[] = []\n\n  render(context: CanvasRenderingContext2D, children?: Mesh[]) {\n    // Get scene children if not defined\n    // This case is mostly the start of the loop\n    children = children || this.children\n\n    // Render scene objects using their own context\n    // This will apply their position/rotation/scale\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].render(context)\n      this.render(context, children[i].children)\n    }\n  }\n}\n","import { Shape } from '../core/Shape'\n\n/**\n * A shape representing a square.\n */\nexport class BoxShape extends Shape {\n  type: string = 'BoxShape'\n\n  width: number = 1.0\n  height: number = 1.0\n\n  constructor(options: BoxShapeOptions = {}) {\n    super()\n    this.width = options.width ?? this.width\n    this.height = options.height ?? this.height\n  }\n\n  render(context: CanvasRenderingContext2D) {\n    context.beginPath()\n    context.rect(-this.width * 0.5, -this.height * 0.5, this.width, this.height)\n    context.closePath()\n  }\n}\n\nexport interface BoxShapeOptions {\n  width?: number\n  height?: number\n}\n","import { Shape } from '../core/Shape'\nimport { PI2 } from '../math'\n\n/**\n * A shape representing a circle.\n */\nexport class CircleShape extends Shape {\n  type: string = 'CircleShape'\n\n  radius: number = 1.0\n\n  constructor(options: CircleShapeOptions = {}) {\n    super()\n    this.radius = options.radius ?? this.radius\n  }\n\n  render(context: CanvasRenderingContext2D) {\n    context.beginPath()\n    context.arc(0, 0, this.radius, 0, PI2)\n    context.closePath()\n  }\n}\n\nexport interface CircleShapeOptions {\n  radius?: number\n}\n","import { Shape } from '../core/Shape'\nimport { Vector2 } from '../math/Vector2'\nimport { PI2 } from '../math'\n\n/**\n * A shape defined by an array of at least 2 vertices in local coordinates.\n */\nexport class PolygonShape extends Shape {\n  type: string = 'PolygonShape'\n\n  _faces: number = 3\n  _radius: number = 1.0\n\n  // Contains all the vertices of the shape.\n  // This is a two-dimensional array for performances purposes.\n  _points: number[][] = []\n\n  constructor(options: PolygonShapeOptions = {}) {\n    super()\n    // FIXME: Avoid double update on init\n    this.faces = options.faces ?? this._faces\n    this.radius = options.radius ?? this._radius\n  }\n\n  render(context: CanvasRenderingContext2D) {\n    context.beginPath()\n\n    context.moveTo(this._points[0][0], this._points[0][1])\n\n    for (let i = 1, l = this._points.length; i < l; i++) {\n      context.lineTo(this._points[i][0], this._points[i][1])\n    }\n\n    context.closePath()\n  }\n\n  /**\n   * Refreshes the polygon cache.\n   * @protected\n   */\n  protected update() {\n    const anglePart = PI2 / this._faces\n    this._points = []\n\n    for (let i = 0, l = this._faces; i < l; i++) {\n      const corner = new Vector2(\n        Math.cos(i * anglePart),\n        Math.sin(i * anglePart)\n      ).multScalar(this._radius)\n\n      this._points.push([corner.x, corner.y])\n    }\n  }\n\n  set faces(value: number) {\n    if (value < 3) {\n      throw new Error('Polygon must have at least 3 faces')\n    }\n    this._faces = value\n    this.update()\n  }\n\n  get faces(): number {\n    return this._faces\n  }\n\n  set radius(value: number) {\n    if (value < 0) {\n      throw new Error('Radius must be greater than 0')\n    }\n    this._radius = value\n    this.update()\n  }\n\n  get radius(): number {\n    return this._radius\n  }\n}\n\nexport interface PolygonShapeOptions {\n  faces?: number\n  radius?: number\n}\n","import { PolygonShape } from './PolygonShape'\n\n/**\n * A shape representing a single triangle.\n */\nexport class TriangleShape extends PolygonShape {\n  type: string = 'TriangleShape'\n\n  constructor(options: TriangleShapeOptions = {}) {\n    super({ ...options, faces: 3 })\n  }\n\n  set faces(value: number) {\n    if (value !== 3) {\n      throw new Error('TriangleShape can only have 3 faces.')\n    }\n    this._faces = value\n  }\n}\n\nexport interface TriangleShapeOptions {\n  radius?: number\n}\n"],"names":["Vector2","constructor","x","y","this","set","copy","v","clone","add","addScalar","scalar","sub","subScalar","mult","multScalar","div","divScalar","lengthSq","length","Math","sqrt","normalize","limit","max","distanceTo","distanceToSq","dx","dy","Camera","options","Canvas","document","createElement","setSize","width","height","element","style","clear","context","getContext","clearRect","render","scene","camera","autoClear","save","translate","position","rotate","rotation","scale","zoom","restore","setSmoothing","smoothing","imageSmoothingEnabled","Material","opacity","globalAlpha","Object2D","Object2DIdCount","visible","object","parent","remove","children","push","index","indexOf","splice","Shape","Color","color","setHex","hex","floor","r","g","b","setRGB","getStyle","BasicMaterial","super","wireframe","strokeStyle","stroke","fillStyle","fill","ImageMaterial","Image","clip","image","src","drawImage","SpriteMaterial","frameStart","frameCount","frameRate","frameSize","frameOffset","loop","prototype","call","PI2","PI","Mesh","shape","material","Scene","i","l","BoxShape","beginPath","rect","closePath","CircleShape","radius","arc","PolygonShape","faces","_faces","_radius","moveTo","_points","lineTo","update","anglePart","corner","cos","sin","value","Error","TriangleShape"],"mappings":"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"}