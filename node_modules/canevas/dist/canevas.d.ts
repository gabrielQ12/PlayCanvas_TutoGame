declare class Vector2 {
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    set(x: number, y: number): Vector2;
    copy(v: Vector2): Vector2;
    clone(): Vector2;
    add(v: Vector2): Vector2;
    addScalar(scalar: number): Vector2;
    sub(v: Vector2): Vector2;
    subScalar(scalar: number): Vector2;
    mult(v: Vector2): Vector2;
    multScalar(scalar: number): Vector2;
    div(v: Vector2): Vector2;
    divScalar(scalar: number): Vector2;
    lengthSq(): number;
    length(): number;
    normalize(): Vector2;
    limit(max: number): Vector2;
    distanceTo(v: Vector2): number;
    distanceToSq(v: Vector2): number;
}

declare class Camera {
    type: string;
    position: Vector2;
    rotation: number;
    zoom: number;
    constructor(options?: object);
}

declare class Object2D {
    id: number;
    type: string;
    parent: Object2D | null;
    children: Array<Object2D>;
    position: Vector2;
    rotation: number;
    scale: number;
    visible: boolean;
    constructor(options?: Object2DOptions);
    add(object: Object2D): this;
    remove(object: Object2D): this;
}
interface Object2DOptions {
    position?: Vector2;
    rotation?: number;
    scale?: number;
    visible?: boolean;
}

declare abstract class Shape {
    type: string;
    abstract render(context: CanvasRenderingContext2D): void;
}

declare class Material {
    type: string;
    opacity: number;
    constructor(options?: MaterialOptions);
    render(context: CanvasRenderingContext2D): void;
}
interface MaterialOptions {
    opacity?: number;
}

declare class Mesh extends Object2D {
    type: string;
    children: Mesh[];
    shape: Shape;
    material: Material;
    constructor(shape: Shape, material: Material, options?: object);
    render(context: CanvasRenderingContext2D): void;
}

declare class Scene extends Object2D {
    type: string;
    children: Mesh[];
    render(context: CanvasRenderingContext2D, children?: Mesh[]): void;
}

declare class Canvas {
    element: HTMLCanvasElement;
    autoClear: boolean;
    setSize(width: number, height: number): void;
    clear(): void;
    render(scene: Scene, camera: Camera): void;
    setSmoothing(smoothing: boolean): void;
}

declare class Color {
    r: number;
    g: number;
    b: number;
    constructor(color: number);
    setHex(hex: number): Color;
    setRGB(r: number, g: number, b: number): Color;
    getStyle(): string;
}

declare class BasicMaterial extends Material {
    type: string;
    wireframe: boolean;
    color: Color;
    constructor(options?: BasicMaterialOptions);
    render(context: CanvasRenderingContext2D): void;
}
interface BasicMaterialOptions extends MaterialOptions {
    wireframe?: boolean;
    color?: number;
}

declare class ImageMaterial extends Material {
    type: string;
    clip: boolean;
    image: HTMLImageElement;
    constructor(options?: ImageMaterialOptions);
    render(context: CanvasRenderingContext2D): void;
}
interface ImageMaterialOptions extends MaterialOptions {
    clip?: boolean;
    src?: string;
}

declare class SpriteMaterial extends ImageMaterial {
    type: string;
    frameStart: number;
    frameCount: number;
    frameRate: number;
    frameSize: number[];
    frameOffset: number[];
    loop: boolean;
    constructor(options?: SpriteMaterialOptions);
    render(context: CanvasRenderingContext2D): void;
}
interface SpriteMaterialOptions extends ImageMaterialOptions {
    frameStart?: number;
    frameSize?: [number, number];
    frameCount?: number;
    frameRate?: number;
    frameOffset?: [number, number];
    loop?: boolean;
}

declare class BoxShape extends Shape {
    type: string;
    width: number;
    height: number;
    constructor(options?: BoxShapeOptions);
    render(context: CanvasRenderingContext2D): void;
}
interface BoxShapeOptions {
    width?: number;
    height?: number;
}

declare class CircleShape extends Shape {
    type: string;
    radius: number;
    constructor(options?: CircleShapeOptions);
    render(context: CanvasRenderingContext2D): void;
}
interface CircleShapeOptions {
    radius?: number;
}

declare class PolygonShape extends Shape {
    type: string;
    _faces: number;
    _radius: number;
    _points: number[][];
    constructor(options?: PolygonShapeOptions);
    render(context: CanvasRenderingContext2D): void;
    protected update(): void;
    set faces(value: number);
    get faces(): number;
    set radius(value: number);
    get radius(): number;
}
interface PolygonShapeOptions {
    faces?: number;
    radius?: number;
}

declare class TriangleShape extends PolygonShape {
    type: string;
    constructor(options?: TriangleShapeOptions);
    set faces(value: number);
}
interface TriangleShapeOptions {
    radius?: number;
}

export { BasicMaterial, BasicMaterialOptions, BoxShape, BoxShapeOptions, Camera, Canvas, CircleShape, CircleShapeOptions, Color, ImageMaterial, ImageMaterialOptions, Material, MaterialOptions, Mesh, Object2D, Object2DOptions, PolygonShape, PolygonShapeOptions, Scene, Shape, SpriteMaterial, SpriteMaterialOptions, TriangleShape, TriangleShapeOptions, Vector2 };
